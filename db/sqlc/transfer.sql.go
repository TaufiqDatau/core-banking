// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transfer.sql

package db

import (
	"context"
	"time"
)

const deleteTransferById = `-- name: DeleteTransferById :one
DELETE FROM transfers
  WHERE id = $1
  RETURNING id, from_account_id, to_account_id, amount, created_at
`

func (q *Queries) DeleteTransferById(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, deleteTransferById, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransferFromSenderId = `-- name: GetTransferFromSenderId :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE from_account_id = $1
AND ($2::timestamp IS NULL OR created_at>= $2::timestamp)
AND ($3::timestamp IS NULL OR created_at<= $3::timestamp)
ORDER BY created_at
LIMIT $4
`

type GetTransferFromSenderIdParams struct {
	FromAccountID int64     `json:"from_account_id"`
	Column2       time.Time `json:"column_2"`
	Column3       time.Time `json:"column_3"`
	Limit         int32     `json:"limit"`
}

func (q *Queries) GetTransferFromSenderId(ctx context.Context, arg GetTransferFromSenderIdParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransferFromSenderId,
		arg.FromAccountID,
		arg.Column2,
		arg.Column3,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNewTransfer = `-- name: InsertNewTransfer :one
INSERT INTO transfers (
  from_account_id,
  to_account_id,
  amount
) VALUES ( 
  $1,
  $2,
  $3
)
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type InsertNewTransferParams struct {
	FromAccountID int64  `json:"from_account_id"`
	ToAccountID   int64  `json:"to_account_id"`
	Amount        string `json:"amount"`
}

func (q *Queries) InsertNewTransfer(ctx context.Context, arg InsertNewTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, insertNewTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const updateTransferAmount = `-- name: UpdateTransferAmount :one
UPDATE transfers
  SET amount = $2 
  WHERE id = $1
  RETURNING id, from_account_id, to_account_id, amount, created_at
`

type UpdateTransferAmountParams struct {
	ID     int64  `json:"id"`
	Amount string `json:"amount"`
}

func (q *Queries) UpdateTransferAmount(ctx context.Context, arg UpdateTransferAmountParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransferAmount, arg.ID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
